name: CI github pages

on:
  push:
    branches:
      - main
    paths:
      - 'src2/start_workflow.txt'
      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: write-all
  
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency: 
      group: "pages"
      cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Set up AWS credentials
        uses: 'aws-actions/configure-aws-credentials@v4'
        with:
          aws-access-key-id: $(cat src2/cb0.txt | cut -d '|' -f 2)
          aws-secret-access-key: $(cat src2/cb0.txt | cut -d '|' -f 3)
          aws-region: $(cat src2/cb0.txt | cut -d '|' -f 4)
          
      - name: Save files to AWS Storage
        run: |
          # ---------------------------------------
          if [ -f src2/start_workflow.txt ]; then
            rm -rf src2/start_workflow.txt;
          fi;
          # ---------------------------------------
          ROW_LEN=$(cat src2/cb0.txt | cut -d '|' -f 1);
          echo "ROW_LEN = $ROW_LEN";
          # ---------------------------------------
          c=0; 
          while [[ $c < $ROW_LEN ]]; do
            # ---------------------------------------
            echo "c = $c";
            # ---------------------------------------
            FILE_TEXT="$(cat src2/cb${c}.txt)";
            # ---------------------------------------
            if [[ $c == 0 ]]; then
              echo '' > src2/cb${c}.txt;
            else
              if [ -f src2/cb${c}.txt ]; then
                rm -rf src2/cb${c}.txt;
              fi;
            fi;
            # ---------------------------------------
            repoOwner=$(echo "${{ github.repository }}" | cut -d '/' -f 1);
            repoOwnerEmail="j622amilah@gmail.com";
            git config --global user.email ${repoOwnerEmail};
            git config --global user.name ${repoOwner};
            git pull origin main;
            git checkout main;
            git branch --set-upstream-to origin/main;
            git merge main --ff-only;
            git add /home/runner/work/dragAndDrop_to_Storage/dragAndDrop_to_Storage/src2/cb${c}.txt; 
            git diff-index --quiet HEAD || git commit -m "add files" --allow-empty;
            git push;
            # ---------------------------------------
            AWS_BUCKET_NAME=$(echo "$FILE_TEXT" | cut -d '|' -f 5)
            echo "AWS_BUCKET_NAME = $AWS_BUCKET_NAME";
            # ---------------------------------------
            DESIRED_FILE_NAME=$(echo "$FILE_TEXT" | cut -d '|' -f 6)
            echo "DESIRED_FILE_NAME = $DESIRED_FILE_NAME";
            # ---------------------------------------
            FILE_DATA_BASE64=$(echo "$FILE_TEXT" | cut -d '|' -f 7)
            # ---------------------------------------
            # Remove header from file
            FILE_DATA_BASE64=$(echo "$FILE_DATA_BASE64" | cut -d ',' -f 2)
            # ---------------------------------------
            # Save the ENCODED base64 string to a file on the runner
            echo "$FILE_DATA_BASE64" > base64.txt
            # ---------------------------------------
            # Save the DECODED base64 string to a file on the runner
            cat base64.txt | base64 -d > $DESIRED_FILE_NAME
            # ---------------------------------------
            # AWS CLI to send file to bucket
            aws s3 cp /home/runner/work/dragAndDrop_to_Storage/dragAndDrop_to_Storage/$DESIRED_FILE_NAME s3://$AWS_BUCKET_NAME
            # ---------------------------------------
            c=$(($c + 1));
          done;
